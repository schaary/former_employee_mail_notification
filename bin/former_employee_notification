#!/usr/bin/env ruby

require 'ruby-plsql'
require 'thor'
require 'awesome_print'
require 'date'
require 'active_support'
require 'active_support/deprecation'
require 'active_support/core_ext'
require 'pry'

class FormerEmployeeMailNotification < Thor
  desc "refresh","refresh infos about former employee"
  def refresh 
    initialize_time_slots
    list = to_hash fetch

    # list.select{ |record| :one == record[:endtime_group] }.each do |record|
    #   puts "'#{record[:firstname]}','#{record[:lastname]}'"
    # end

    one = list.select{ |record| :one == record[:endtime_group] }.count
    two = list.select{ |record| :two == record[:endtime_group] }.count
    three = list.select{ |record| :three == record[:endtime_group] }.count
    four = list.select{ |record| :four == record[:endtime_group] }.count
    five = list.select{ |record| :five == record[:endtime_group] }.count
    six = list.select{ |record| :six == record[:endtime_group] }.count
    #seven = list.select{ |record| :seven == record[:endtime_group] }.count
    rest = list.count - (one+two+three+four+five+six)


    puts ""
    puts "Gesamtanzahl zu löschender ehem. Mitarbeiter #{list.count}"
    puts ""
    puts "Einen Monat:  #{one}"
    puts "Zwei Monate:  #{two}"
    puts "Drei Monate:  #{three}"
    puts "Vier Monate:  #{four}"
    puts "Fünf Monate:  #{five}"
    puts "Sechs Monate: #{six}"
    puts "Sieben oder mehr Monate: #{rest}"
  end

private 
  def fetch
    connect

    list = {}
    plsql.mitarbeiter_account_pkg.expiredUserList do |cursor|
      list = cursor.fetch_all
    end
    list
  end

  def initialize_time_slots
    @time_slots = {
      one:   {start: Time.now.months_ago(1).at_beginning_of_month, 
              end:   Time.now.months_ago(1).at_end_of_month},
      two:   {start: Time.now.months_ago(2).at_beginning_of_month, 
              end:   Time.now.months_ago(2).at_end_of_month},
      three: {start: Time.now.months_ago(3).at_beginning_of_month, 
              end:   Time.now.months_ago(3).at_end_of_month},
      four:  {start: Time.now.months_ago(4).at_beginning_of_month, 
              end:   Time.now.months_ago(4).at_end_of_month},
      five:  {start: Time.now.months_ago(5).at_beginning_of_month, 
              end:   Time.now.months_ago(5).at_end_of_month},
      six:   {start: Time.now.months_ago(6).at_beginning_of_month, 
              end:   Time.now.months_ago(6).at_end_of_month},
    }
  end

  def to_hash list
    list.inject([]) do |new_list, array|
      new_list.push(
       {uid: array[9],
        mail: array[2],
        firstname: array[0],
        lastname: array[1],
        gender: array[5].to_i,
        #title: array[5],
        endtime: make_date(array[4]),
        endtime_group: select_endtime_group(make_date(array[4]))}
      )
    end
  end

  def select_endtime_group date
    return :seven if date.nil?

    @time_slots.select { |k,v| (v[:start]..v[:end]).cover? date }.keys.first
  end

  def connect
    plsql.connection ||= OCI8.new( 
      ENV.fetch('UMT_USER'), 
      ENV.fetch('UMT_PASSWORD'), 
      ENV.fetch('UMT_SID') )
  end

  def make_date date
    return nil if date.nil?

    Date.parse date
  end
end

FormerEmployeeMailNotification.start
